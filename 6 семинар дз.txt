# Напишите программу вычисления арифметического выражения заданного строкой.
# Используйте операции +,-,/,. приоритет операций стандартный.
# Дополнительное задание: Добавьте возможность использования скобок, меняющих приоритет операций
# *Пример:
# 2+2 => 4;
# 1+2*3 => 7;

# 10/2*5 => 25;
# 10 * 5 * => недостаточно числовых данных
# -5 + 5 => 0
# два + три => неправильный ввод: нужны числа
# (2+((5-3)*(16-14)))/3 => 2
# (256 - 194 => некорректная запись скобок

expr = '1+2*3'
expr = expr.replace(' ', '')
operators = {
    '*': lambda x, y: x*y,
    '/': lambda x, y: x/y,
    '+': lambda x, y: x+y,
    '-': lambda x, y: x-y
}
for oper in operators:
    expr = expr.replace(oper, f'#{oper}#')
terms = expr.split('#')

for oper in operators:
    while True:
        try:
            i = terms.index(oper)
            result = operators.get(oper)(int(terms[i-1]), int(terms[i+1]))
            terms[i] = result
            del terms[i-1]
            del terms[i]
        except:
            break
print(terms)

# Найти расстояние между двумя точками пространства(числа вводятся через пробел)

import math
coords = '1 3 2.5 2 5.7 6' 
dist = list(map(lambda x: float(x), coords.split(' ')))
sq = lambda x2, x1: (x2-x1)**2
print(round(math.sqrt((sq(dist[3], dist[0]) + sq(dist[4], dist[1]) + sq(dist[5], dist[2]))), 2))


#  Определить, позицию второго вхождения строки в списке либо сообщить, что её нет.
# Примеры
# список: ["qwe", "asd", "zxc", "qwe", "ertqwe"], ищем: "qwe", ответ: 3
# список: ["йцу", "фыв", "ячс", "цук", "йцукен", "йцу"], ищем: "йцу", ответ: 5
# список: ["йцу", "фыв", "ячс", "цук", "йцукен"], ищем: "йцу", ответ: -1
# список: ["123", "234", 123, "567"], ищем: "123", ответ: -1
# список: [], ищем: "123", ответ: -1

st = 'йцу1'
n_list = ["йцу", "фыв", "ячс", "цук", "йцукен", "йцу"]
try:
    print(list(filter(lambda tuple: tuple[0] == st, zip(n_list, range(len(n_list)))))[1][1])
except IndexError:
    print(-1)


# Найти произведение пар чисел в списке. Парой считаем первый и последний элемент, второй и предпоследний и т.д.
collection = [2, 3, 4, 9, 1, 3]
length = len(collection)
print(list(map(lambda i: collection[i] * collection[length - i - 1], range(length // 2 + length % 2))))



# Сформировать список из N членов последовательности.

N = int(input("Введите число: "))
print(list(map(lambda x: (-3)**x, range(N))))
   

# Дана последовательность чисел. Получить список уникальных элементов заданной последовательности.
# Пример:
# [1, 2, 3, 5, 1, 5, 3, 10] => [2, 10]

def unique(lst: list) -> list:
    return list(filter(lambda s: lst.count(s) == 1, lst))

my_list = [1, 2, 3, 5, 1, 5, 3, 10]
print(unique(my_list))

# Напишите программу, которая принимает на
# вход вещественное число и показывает сумму его цифр.
# Пример:
# - 6782 -> 23
# - 0, 56 -> 11

def sum_num(num: str) -> int:
    return sum(map(int, filter(lambda i: i.isdigit(), str(num))))


print(sum_num(6782))
print(sum_num(0.56))


# Напишите программу, которая принимает на вход число N
# и выдает набор произведений чисел от 1 до N.
# Пример:
# - пусть N = 4, тогда[1, 2, 6, 24](1, 1*2, 1*2*3, 1*2*3*4)

import math

def fact(n: int) -> list:
    li = [i for i in range(1, n+1)]
    fact = list(map(lambda x: math.factorial(x), li))
    return fact

print(fact(4))



# Задайте список из n чисел последовательности
# $(1 +\frac 1 n) ^ n$ и выведите на экран их сумму.


def seq(n: int) -> float:
    li = [i for i in range(1, n + 1)]
    sum_sq = sum((map(lambda x: (1 + 1/x)**x , li)))
    return sum_sq

print(round(seq(6),2))


# Задайте список из нескольких чисел. Напишите программу,
# которая найдёт сумму элементов списка, стоящих на нечётной позиции.
# Пример:
# - [2, 3, 5, 9, 3] -> на нечётных позициях элементы 3 и 9, ответ: 12

def sum_odd_index(lst: list) -> int:
    l = enumerate(lst)
    l1 = filter(lambda e: e[0] % 2 == 1, l)
    l2 = list(zip(*l1))
    l3 = list(l2[1])
    return sum(l3)


print(sum_odd_index([2, 3, 5, 9, 3]))




numbers = [2, 3, 4, 5, 6, 7, 5]diff = list([a*b for a, b in zip(numbers, numbers[:(len(numbers)//2) - 1: -1])])print(diff)













